import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.LinuxConfig
import io.github.fvarrui.javapackager.model.MacConfig
import io.github.fvarrui.javapackager.model.WindowsConfig

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.7.5'
    }
}
plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'org.fidelitas'
version '1.0-SNAPSHOT'

apply plugin: 'io.github.fvarrui.javapackager.plugin'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.fidelitas.ide'
    mainClass = 'org.fidelitas.ide.CodeditApplication'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation group: 'org.reactfx', name: 'reactfx', version: '1.4.1'
    implementation('org.fxmisc.richtext:richtextfx:0.11.1')
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}
tasks.register('release', PackageTask) {
    dependsOn build
    // mandatory
    mainClass = 'org.fidelitas.ide.CodeditApplication'
    // optional
    bundleJre = false
    generateInstaller = false
    administratorRequired = false
    platform = "auto"
    //additionalResources = [ file('file path'), file('folder path'), ... ]
    linuxConfig(({

    } as Closure<LinuxConfig>))
    macConfig(({

    } as Closure<MacConfig>))
    winConfig(({

    } as Closure<WindowsConfig>))
}